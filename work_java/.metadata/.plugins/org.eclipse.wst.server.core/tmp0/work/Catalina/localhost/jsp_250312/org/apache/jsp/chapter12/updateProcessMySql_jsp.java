/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-03-19 00:20:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.chapter12;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.naming.NamingException;
import java.sql.PreparedStatement;
import javax.sql.DataSource;
import javax.naming.Context;
import javax.naming.InitialContext;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;

public final class updateProcessMySql_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(14);
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("javax.naming.NamingException");
    _jspx_imports_classes.add("javax.naming.Context");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Connection conn=null;
	PreparedStatement pstmt= null;
	ResultSet rs=null;
	DataSource ds=null;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>사원 목록</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("		");

			try{
// 				Context ctx= new InitialContext();
// 				ds=(DataSource)ctx.lookup("java:comp/env/jdbc/oracle");
// 				conn=ds.getConnection();
// 				세줄을 한줄로 만들었음(취향따라 ㄱㄱ) 
				conn=((DataSource)(new InitialContext().lookup("java:comp/env/jdbc/mysql"))).getConnection();
				
				
			}catch(NamingException ne){
				ne.printStackTrace();
			}catch(SQLException ex){
				out.print("데이터 베이스 연결이 실패했습니다.");
				out.print(ex.getMessage());
			}
		
		//여기 finally가 중복되서 오류가 있었음 ! 없어야한다 
// 			finally{
// 				try{
// 					if(rs != null){rs.close();}
// 					if(pstmt != null){pstmt.close();}
// 					if(conn != null){conn.close();}
// 				}catch(SQLException se){
// 					se.printStackTrace();
// 				}
// 			}
		
		
	// 		StringBuffer selectQuery = new StringBuffer();
	// 		String id =request.getParameter("id"); 
	// 		selectQuery.append("select name,class,tel from member2 where id=?");
			
			String id="",name="",vclass="",tel="";
			id=request.getParameter("id");
			name=request.getParameter("name");
			vclass=request.getParameter("mclass");
			tel=request.getParameter("tel");
			
			//확인용 로그 
			out.print("@#id=>"+id);
			out.print("@#name=>"+name);
			out.print("@#vclass=>"+vclass);
			out.print("@#tel=>"+tel);
			
			StringBuffer updateQuery = new StringBuffer();
			//이렇게짜면 롤백도 안되서 다 날라갈 수도 있음...**** 한 건 이니까where절
	// 		updateQuery.append("update member2 set name=?, class=?,tel=?");
			
			updateQuery.append("update member set name=?, class=?,tel=? where id=?");
		
			try{ //회의 갔는데 입사했다가 퇴사하면 오류 그대로 나버리니까 여기도 trycatch넣기
				//업데이트 SQL 처리(데이터가 변경되거나 삭제될수도 있기에 예외처리 )
				pstmt=conn.prepareStatement(updateQuery.toString());
				// ? 4개를 순서대로 값 셋팅 (위에 updateQuery순서에 맞춰서 ?위치)
				pstmt.setString(1, name); // varchar2타입은 setString 메소드 사용 
				//setString 그대로 하면 oracle가서 casting 하기에 속도 저하가 됨(넘버는 Int로받자)
				pstmt.setInt(2, Integer.parseInt(vclass)); //int 타입은 setInt메소드사용 
				pstmt.setString(3, tel); 
				pstmt.setString(4, id); 
				
				//업데이트는executeUpdate 
				int re = pstmt.executeUpdate(); //정상적으로 수정시 1이 반환됨
				
				if(re == 1){
					
      out.write("\r\n");
      out.write("						");
      out.print( id );
      out.write("의 정보가 수정되었습니다.<br>\r\n");
      out.write("						[<a href=\"viewMemberMySql.jsp\">목록보기</a>]\r\n");
      out.write("					");

				}else{
					
      out.write("\r\n");
      out.write("						변경 실패 \r\n");
      out.write("					");

				}
			}catch(SQLException ex){
				out.print("데이터 베이스 연결이 실패했습니다.");
				out.print(ex.getMessage());
			}finally{
				try{
					if(rs != null){rs.close();}
					if(pstmt != null){pstmt.close();}
					if(conn != null){conn.close();}
				}catch(SQLException se){
					se.printStackTrace();
				}
			}
		
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
